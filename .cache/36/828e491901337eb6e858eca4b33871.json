{"id":"../node_modules/graphql-anywhere/lib/src/directives.js","dependencies":[{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\directives.js.map","includedInParent":true,"mtime":1603029498220},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\src\\directives.ts","includedInParent":true,"mtime":1603029498220},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\package.json","includedInParent":true,"mtime":1607332937128},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\package.json","includedInParent":true,"mtime":1603029498220},{"name":"./storeUtils","loc":{"line":3,"column":27},"parent":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\directives.js","resolved":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\storeUtils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar storeUtils_1 = require(\"./storeUtils\");\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = storeUtils_1.argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nexports.getDirectiveInfoFromField = getDirectiveInfoFromField;\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.some(function (directive) {\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            return;\n        }\n        var directiveArguments = directive.arguments;\n        var directiveName = directive.name.value;\n        if (directiveArguments.length !== 1) {\n            throw new Error(\"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        }\n        var ifArgument = directive.arguments[0];\n        if (!ifArgument.name || ifArgument.name.value !== 'if') {\n            throw new Error(\"Invalid argument for the @\" + directiveName + \" directive.\");\n        }\n        var ifValue = directive.arguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            if (ifValue.kind !== 'Variable') {\n                throw new Error(\"Argument for the @\" + directiveName + \" directive must be a variable or a bool ean value.\");\n            }\n            else {\n                evaledValue = variables[ifValue.name.value];\n                if (evaledValue === undefined) {\n                    throw new Error(\"Invalid variable referenced in @\" + directiveName + \" directive.\");\n                }\n            }\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n            return true;\n        }\n        return false;\n    });\n    return res;\n}\nexports.shouldInclude = shouldInclude;\n"},"sourceMaps":{"js":{"version":3,"file":"directives.js","sourceRoot":"","sources":["../../src/directives.ts"],"names":[],"mappings":";;AAUA,2CAEsB;AAMtB,mCAA0C,KAAgB,EAAE,SAAiB;IAC3E,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QAChD,IAAM,cAAY,GAAkB,EAAE,CAAC;QACvC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAwB;YAChD,cAAY,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,qCAAwB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,cAAY,CAAC;IACtB,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AATD,8DASC;AAED,uBAA8B,SAAwB,EAAE,SAAuC;IAAvC,0BAAA,EAAA,cAAuC;IAC7F,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,IAAI,GAAG,GAAY,IAAI,CAAC;IACxB,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,SAAS;QAElC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YAE1E,MAAM,CAAC;QACT,CAAC;QAGD,IAAM,kBAAkB,GAAG,SAAS,CAAC,SAAS,CAAC;QAC/C,IAAM,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3C,EAAE,CAAC,CAAC,kBAAkB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,4CAA0C,aAAa,gBAAa,CAAC,CAAC;QACxF,CAAC;QAGD,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACvD,MAAM,IAAI,KAAK,CAAC,+BAA6B,aAAa,gBAAa,CAAC,CAAC;QAC3E,CAAC;QAED,IAAM,OAAO,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7C,IAAI,WAAW,GAAY,KAAK,CAAC;QACjC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC,CAAC;YAEhD,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,KAAK,CAAC,uBAAqB,aAAa,uDAAoD,CAAC,CAAC;YAC1G,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,WAAW,GAAG,SAAS,CAAE,OAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9D,EAAE,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC9B,MAAM,IAAI,KAAK,CAAC,qCAAmC,aAAa,gBAAa,CAAC,CAAC;gBACjF,CAAC;YACH,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,WAAW,GAAI,OAA4B,CAAC,KAAK,CAAC;QACpD,CAAC;QAED,EAAE,CAAC,CAAC,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC;YAC7B,WAAW,GAAG,CAAC,WAAW,CAAC;QAC7B,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACjB,GAAG,GAAG,KAAK,CAAC;YAEZ,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAxDD,sCAwDC","sourcesContent":["// Provides the methods that allow QueryManager to handle\n// the `skip` and `include` directives within GraphQL.\nimport {\n  FieldNode,\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n} from 'graphql';\n\nimport {\n  argumentsObjectFromField,\n} from './storeUtils';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: {[argName: string]: any},\n};\n\nexport function getDirectiveInfoFromField(field: FieldNode, variables: Object): DirectiveInfo {\n  if (field.directives && field.directives.length) {\n    const directiveObj: DirectiveInfo = {};\n    field.directives.forEach((directive: DirectiveNode) => {\n      directiveObj[directive.name.value] = argumentsObjectFromField(directive, variables);\n    });\n    return directiveObj;\n  }\n  return null;\n}\n\nexport function shouldInclude(selection: SelectionNode, variables: { [name: string]: any } = {}): Boolean {\n  if (!selection.directives) {\n    return true;\n  }\n\n  let res: Boolean = true;\n  selection.directives.some((directive) => {\n    // TODO should move this validation to GraphQL validation once that's implemented.\n    if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n      // Just don't worry about directives we don't understand\n      return;\n    }\n\n    //evaluate the \"if\" argument and skip (i.e. return undefined) if it evaluates to true.\n    const directiveArguments = directive.arguments;\n    const directiveName = directive.name.value;\n    if (directiveArguments.length !== 1) {\n      throw new Error(`Incorrect number of arguments for the @${directiveName} directive.`);\n    }\n\n\n    const ifArgument = directive.arguments[0];\n    if (!ifArgument.name || ifArgument.name.value !== 'if') {\n      throw new Error(`Invalid argument for the @${directiveName} directive.`);\n    }\n\n    const ifValue = directive.arguments[0].value;\n    let evaledValue: Boolean = false;\n    if (!ifValue || ifValue.kind !== 'BooleanValue') {\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      if (ifValue.kind !== 'Variable') {\n        throw new Error(`Argument for the @${directiveName} directive must be a variable or a bool ean value.`);\n      } else {\n        evaledValue = variables[(ifValue as VariableNode).name.value];\n        if (evaledValue === undefined) {\n          throw new Error(`Invalid variable referenced in @${directiveName} directive.`);\n        }\n      }\n    } else {\n      evaledValue = (ifValue as BooleanValueNode).value;\n    }\n\n    if (directiveName === 'skip') {\n      evaledValue = !evaledValue;\n    }\n\n    if (!evaledValue) {\n      res = false;\n      // Exit this function:\n      return true;\n    }\n\n    return false;\n  });\n\n  return res;\n}\n"]}},"error":null,"hash":"102d048ab51232f2b0fb6b576f702121","cacheData":{"env":{}}}