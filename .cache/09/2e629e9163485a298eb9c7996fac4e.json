{"id":"../node_modules/graphql-anywhere/lib/src/storeUtils.js","dependencies":[{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\storeUtils.js.map","includedInParent":true,"mtime":1603029498220},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\src\\storeUtils.ts","includedInParent":true,"mtime":1603029498220},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\package.json","includedInParent":true,"mtime":1607332937128},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\package.json","includedInParent":true,"mtime":1603029498220}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SCALAR_TYPES = {\n    StringValue: true,\n    BooleanValue: true,\n    EnumValue: true,\n};\nfunction isScalarValue(value) {\n    return !!SCALAR_TYPES[value.kind];\n}\nvar NUMBER_TYPES = {\n    IntValue: true,\n    FloatValue: true,\n};\nfunction isNumberValue(value) {\n    return NUMBER_TYPES[value.kind];\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObject(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isList(value) {\n    return value.kind === 'ListValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (isNumberValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isScalarValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObject(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) { return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables); });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = variables[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isList(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else {\n        throw new Error(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\" is not supported. Use variables instead of inline arguments to overcome this limitation.\");\n    }\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nexports.argumentsObjectFromField = argumentsObjectFromField;\nfunction resultKeyNameFromField(field) {\n    return field.alias ?\n        field.alias.value :\n        field.name.value;\n}\nexports.resultKeyNameFromField = resultKeyNameFromField;\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nexports.isField = isField;\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nexports.isInlineFragment = isInlineFragment;\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\nexports.graphQLResultHasError = graphQLResultHasError;\n"},"sourceMaps":{"js":{"version":3,"file":"storeUtils.js","sourceRoot":"","sources":["../../src/storeUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  ExecutionResult,\n  NameNode,\n} from 'graphql';\n\ntype ScalarValue = StringValueNode | BooleanValueNode | EnumValueNode;\n\nconst SCALAR_TYPES = {\n  StringValue: true,\n  BooleanValue: true,\n  EnumValue: true,\n};\n\nfunction isScalarValue(value: ValueNode): value is ScalarValue {\n  return !!SCALAR_TYPES[value.kind];\n}\n\ntype NumberValue = IntValueNode | FloatValueNode;\n\nconst NUMBER_TYPES = {\n  IntValue: true,\n  FloatValue: true,\n};\n\nfunction isNumberValue(value: ValueNode): value is NumberValue {\n  return NUMBER_TYPES[value.kind];\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObject(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isList(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction valueToObjectRepresentation(argObj: any, name: NameNode, value: ValueNode, variables: Object = {}) {\n  if (isNumberValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isScalarValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObject(value)) {\n    const nestedArgObj = {};\n    value.fields.map((obj) => valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables));\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = variables[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isList(value)) {\n    argObj[name.value] = value.values.map((listValue) => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else {\n    // There are no other types of values we know of, but some might be added later and we want\n    // to have a nice error for that case.\n    throw new Error(`The inline argument \"${name.value}\" of kind \"${(value as any).kind}\" is not \\\nsupported. Use variables instead of inline arguments to overcome this limitation.`);\n  }\n}\n\nexport function argumentsObjectFromField(field: FieldNode | DirectiveNode, variables: Object): Object {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({name, value}) => valueToObjectRepresentation(\n      argObj, name, value, variables));\n    return argObj;\n  }\n\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ?\n    field.alias.value :\n    field.name.value;\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(selection: SelectionNode): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport function graphQLResultHasError(result: ExecutionResult) {\n  return result.errors && result.errors.length;\n}\n"]}},"error":null,"hash":"cc586d9539913d75aa6ed5bd0f3a5121","cacheData":{"env":{}}}