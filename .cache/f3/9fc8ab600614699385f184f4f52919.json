{"id":"../node_modules/graphql-anywhere/lib/src/graphql.js","dependencies":[{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\graphql.js.map","includedInParent":true,"mtime":1603029498220},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\src\\graphql.ts","includedInParent":true,"mtime":1603029498220},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\package.json","includedInParent":true,"mtime":1607332937128},{"name":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\package.json","includedInParent":true,"mtime":1603029498220},{"name":"./getFromAST","loc":{"line":3,"column":27},"parent":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\graphql.js","resolved":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\getFromAST.js"},{"name":"./directives","loc":{"line":4,"column":27},"parent":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\graphql.js","resolved":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\directives.js"},{"name":"./storeUtils","loc":{"line":5,"column":27},"parent":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\graphql.js","resolved":"C:\\Users\\shadow\\projects\\open-source\\gun-cli\\node_modules\\graphql-anywhere\\lib\\src\\storeUtils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar getFromAST_1 = require(\"./getFromAST\");\nvar directives_1 = require(\"./directives\");\nvar storeUtils_1 = require(\"./storeUtils\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = getFromAST_1.getMainDefinition(document);\n    var fragments = getFromAST_1.getFragmentDefinitions(document);\n    var fragmentMap = getFromAST_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var deferrableOrImmediate = execOptions.deferrableOrImmediate || promiseOrImmediate;\n    var arrayOrDeferrable = execOptions.arrayOrDeferrable || arrayOrPromise;\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n        deferrableOrImmediate: deferrableOrImmediate,\n        arrayOrDeferrable: arrayOrDeferrable,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues, deferrableOrImmediate = execContext.deferrableOrImmediate, arrayOrDeferrable = execContext.arrayOrDeferrable;\n    var result = {};\n    return deferrableOrImmediate(arrayOrDeferrable(selectionSet.selections.map(function (selection) {\n        if (!directives_1.shouldInclude(selection, variables)) {\n            return;\n        }\n        if (storeUtils_1.isField(selection)) {\n            var fieldResultOrDeferrable = executeField(selection, rootValue, execContext);\n            return deferrableOrImmediate(fieldResultOrDeferrable, function (fieldResult) {\n                var resultFieldKey = storeUtils_1.resultKeyNameFromField(selection);\n                if (fieldResult !== undefined) {\n                    if (result[resultFieldKey] === undefined) {\n                        result[resultFieldKey] = fieldResult;\n                    }\n                    else {\n                        merge(result[resultFieldKey], fieldResult);\n                    }\n                }\n            });\n        }\n        else {\n            var fragment_1;\n            if (storeUtils_1.isInlineFragment(selection)) {\n                fragment_1 = selection;\n            }\n            else {\n                fragment_1 = fragmentMap[selection.name.value];\n                if (!fragment_1) {\n                    throw new Error(\"No fragment named \" + selection.name.value);\n                }\n            }\n            var typeCondition = fragment_1.typeCondition.name.value;\n            return deferrableOrImmediate(execContext.fragmentMatcher(rootValue, typeCondition, contextValue), function (fragmentMatcherResult) {\n                if (fragmentMatcherResult) {\n                    var fragmentResultOrDeferrable = executeSelectionSet(fragment_1.selectionSet, rootValue, execContext);\n                    return deferrableOrImmediate(fragmentResultOrDeferrable, function (fragmentResult) {\n                        merge(result, fragmentResult);\n                    });\n                }\n            });\n        }\n    })), function () {\n        if (execContext.resultMapper) {\n            return execContext.resultMapper(result, rootValue);\n        }\n        return result;\n    });\n}\nfunction executeField(field, rootValue, execContext) {\n    var variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver, deferrableOrImmediate = execContext.deferrableOrImmediate;\n    var fieldName = field.name.value;\n    var args = storeUtils_1.argumentsObjectFromField(field, variables);\n    var info = {\n        isLeaf: !field.selectionSet,\n        resultKey: storeUtils_1.resultKeyNameFromField(field),\n        directives: directives_1.getDirectiveInfoFromField(field, variables),\n    };\n    var resultOrDeferrable = resolver(fieldName, rootValue, args, contextValue, info);\n    return deferrableOrImmediate(resultOrDeferrable, function (result) {\n        if (!field.selectionSet) {\n            return result;\n        }\n        if (result == null) {\n            return result;\n        }\n        if (Array.isArray(result)) {\n            return executeSubSelectedArray(field, result, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, result, execContext);\n    });\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return execContext.arrayOrDeferrable(result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    }));\n}\nfunction merge(dest, src) {\n    if (src === null ||\n        typeof src !== 'object' ||\n        src.constructor.name === \"Gun\") {\n        return src;\n    }\n    Object.keys(dest).forEach(function (destKey) {\n        if (src.hasOwnProperty(destKey)) {\n            merge(dest[destKey], src[destKey]);\n        }\n    });\n    Object.keys(src).forEach(function (srcKey) {\n        if (!dest.hasOwnProperty(srcKey)) {\n            dest[srcKey] = src[srcKey];\n        }\n    });\n}\nfunction isPromise(obj) {\n    return obj && typeof obj === 'object' && typeof obj.then === 'function';\n}\nfunction promiseOrImmediate(obj, fn) {\n    if (isPromise(obj)) {\n        return obj.then(fn);\n    }\n    else {\n        return fn(obj);\n    }\n}\nfunction arrayOrPromise(arr) {\n    if (arr.some(isPromise)) {\n        return Promise.all(arr);\n    }\n    else {\n        return arr;\n    }\n}\n"},"sourceMaps":{"js":{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../../src/graphql.ts"],"names":[],"mappings":";;AAQA,2CAKsB;AAEtB,2CAIsB;AAEtB,2CAKsB;AAkDtB,iBACE,QAAkB,EAClB,QAAsB,EACtB,SAAe,EACf,YAAkB,EAClB,cAA4B,EAC5B,WAA6B;IAA7B,4BAAA,EAAA,gBAA6B;IAE7B,IAAM,cAAc,GAAG,8BAAiB,CAAC,QAAQ,CAAC,CAAC;IAEnD,IAAM,SAAS,GAAG,mCAAsB,CAAC,QAAQ,CAAC,CAAC;IACnD,IAAM,WAAW,GAAG,8BAAiB,CAAC,SAAS,CAAC,CAAC;IAEjD,IAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;IAG9C,IAAM,eAAe,GAAG,WAAW,CAAC,eAAe,IAAI,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IAGpE,IAAM,qBAAqB,GAAG,WAAW,CAAC,qBAAqB,IAAI,kBAAkB,CAAC;IACtF,IAAM,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,IAAI,cAAc,CAAC;IAE1E,IAAM,WAAW,GAAgB;QAC/B,WAAW,aAAA;QACX,YAAY,cAAA;QACZ,cAAc,gBAAA;QACd,YAAY,cAAA;QACZ,QAAQ,UAAA;QACR,eAAe,iBAAA;QACf,qBAAqB,uBAAA;QACrB,iBAAiB,mBAAA;KAClB,CAAC;IAEF,MAAM,CAAC,mBAAmB,CACxB,cAAc,CAAC,YAAY,EAC3B,SAAS,EACT,WAAW,CACZ,CAAC;AACJ,CAAC;AAtCD,0BAsCC;AAGD,6BACE,YAA8B,EAC9B,SAAc,EACd,WAAwB;IAGtB,IAAA,qCAAW,EACX,uCAAY,EACZ,sCAAyB,EACzB,yDAAqB,EACrB,iDAAiB,CACH;IAEhB,IAAM,MAAM,GAAG,EAAE,CAAC;IAElB,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,SAAS;QACnF,EAAE,CAAC,CAAC,CAAC,0BAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YAEzC,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,oBAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvB,IAAM,uBAAuB,GAAG,YAAY,CAC1C,SAAS,EACT,SAAS,EACT,WAAW,CACZ,CAAC;YAEF,MAAM,CAAC,qBAAqB,CAAC,uBAAuB,EAAE,UAAC,WAAW;gBAChE,IAAM,cAAc,GAAG,mCAAsB,CAAC,SAAS,CAAC,CAAC;gBAEzD,EAAE,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;wBACzC,MAAM,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC;oBACvC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,WAAW,CAAC,CAAC;oBAC7C,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,UAAqD,CAAC;YAE1D,EAAE,CAAC,CAAC,6BAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAChC,UAAQ,GAAG,SAAS,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEN,UAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAE7C,EAAE,CAAC,CAAC,CAAC,UAAQ,CAAC,CAAC,CAAC;oBACd,MAAM,IAAI,KAAK,CAAC,uBAAqB,SAAS,CAAC,IAAI,CAAC,KAAO,CAAC,CAAC;gBAC/D,CAAC;YACH,CAAC;YAED,IAAM,aAAa,GAAG,UAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC;YAExD,MAAM,CAAC,qBAAqB,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EAAE,aAAa,EAAE,YAAY,CAAC,EAAE,UAAC,qBAAqB;gBAEtH,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBAC1B,IAAM,0BAA0B,GAAG,mBAAmB,CACpD,UAAQ,CAAC,YAAY,EACrB,SAAS,EACT,WAAW,CACZ,CAAC;oBAEF,MAAM,CAAC,qBAAqB,CAAC,0BAA0B,EAAE,UAAC,cAAc;wBACtE,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;oBAChC,CAAC,CAAC,CAAC;gBAEL,CAAC;YAEH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC,EAAE;QACH,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,sBACE,KAAgB,EAChB,SAAc,EACd,WAAwB;IAGtB,IAAA,sCAAyB,EACzB,uCAAY,EACZ,+BAAQ,EACR,yDAAqB,CACP;IAEhB,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;IACnC,IAAM,IAAI,GAAG,qCAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAExD,IAAM,IAAI,GAAa;QACrB,MAAM,EAAE,CAAC,KAAK,CAAC,YAAY;QAC3B,SAAS,EAAE,mCAAsB,CAAC,KAAK,CAAC;QACxC,UAAU,EAAE,sCAAyB,CAAC,KAAK,EAAE,SAAS,CAAC;KACxD,CAAC;IAEF,IAAM,kBAAkB,GAAG,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAEpF,MAAM,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,UAAC,MAAM;QAEtD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;QAID,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YAEnB,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;QAC7D,CAAC;QAGD,MAAM,CAAC,mBAAmB,CACxB,KAAK,CAAC,YAAY,EAClB,MAAM,EACN,WAAW,CACZ,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAED,iCACE,KAAK,EACL,MAAM,EACN,WAAW;IAEX,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,IAAI;QAEnD,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAGD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,uBAAuB,CAAC,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;QAC3D,CAAC;QAGD,MAAM,CAAC,mBAAmB,CACxB,KAAK,CAAC,YAAY,EAClB,IAAI,EACJ,WAAW,CACZ,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;AAED,eAAe,IAAI,EAAE,GAAG;IACtB,EAAE,CAAC,CACD,GAAG,KAAK,IAAI;QACZ,OAAO,GAAG,KAAK,QAAQ;QACvB,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,KAC3B,CAAC,CAAC,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAGD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,OAAO;QAChC,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAChC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACrC,CAAC;IACH,CAAC,CAAC,CAAC;IAGH,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,MAAM;QAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,mBAAmB,GAAG;IACpB,MAAM,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;AAC1E,CAAC;AAED,4BAA4B,GAAG,EAAE,EAAE;IACjC,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtB,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;AACH,CAAC;AAED,wBAAwB,GAAG;IACzB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;AACH,CAAC","sourcesContent":["import {\n  DocumentNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from 'graphql';\n\nimport {\n  getMainDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  FragmentMap,\n} from './getFromAST';\n\nimport {\n  DirectiveInfo,\n  shouldInclude,\n  getDirectiveInfoFromField,\n} from './directives';\n\nimport {\n  isField,\n  isInlineFragment,\n  resultKeyNameFromField,\n  argumentsObjectFromField,\n} from './storeUtils';\n\nexport type Resolver = (\n  fieldName: string,\n  rootValue: any,\n  args: any,\n  context: any,\n  info: ExecInfo,\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type ResultMapper = (values: {[fieldName: string]: any}, rootValue: any) => any;\nexport type FragmentMatcher = (rootValue: any, typeCondition: string, context: any) => boolean|Promise<boolean>;\nexport type DeferrableOrImmediate = (obj: any, fn: any) => any;\nexport type ArrayOrDeferrable = (arr: any[]) => any;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  contextValue: any;\n  variableValues: VariableMap;\n  resultMapper: ResultMapper;\n  resolver: Resolver;\n  fragmentMatcher: FragmentMatcher;\n  deferrableOrImmediate: DeferrableOrImmediate;\n  arrayOrDeferrable: ArrayOrDeferrable;\n};\n\nexport type ExecInfo = {\n  isLeaf: boolean;\n  resultKey: string;\n  directives: DirectiveInfo;\n};\n\nexport type ExecOptions = {\n  resultMapper?: ResultMapper;\n  fragmentMatcher?: FragmentMatcher;\n  deferrableOrImmediate?: DeferrableOrImmediate;\n  arrayOrDeferrable?: ArrayOrDeferrable;\n};\n\n// Based on graphql function from graphql-js:\n// graphql(\n//   schema: GraphQLSchema,\n//   requestString: string,\n//   rootValue?: ?any,\n//   contextValue?: ?any,\n//   variableValues?: ?{[key: string]: any},\n//   operationName?: ?string\n// ): Promise<GraphQLResult>\nexport function graphql(\n  resolver: Resolver,\n  document: DocumentNode,\n  rootValue?: any,\n  contextValue?: any,\n  variableValues?: VariableMap,\n  execOptions: ExecOptions = {},\n) {\n  const mainDefinition = getMainDefinition(document);\n\n  const fragments = getFragmentDefinitions(document);\n  const fragmentMap = createFragmentMap(fragments);\n\n  const resultMapper = execOptions.resultMapper;\n\n  // Default matcher always matches all fragments\n  const fragmentMatcher = execOptions.fragmentMatcher || (() => true);\n\n  // Default deferrable is a promise\n  const deferrableOrImmediate = execOptions.deferrableOrImmediate || promiseOrImmediate;\n  const arrayOrDeferrable = execOptions.arrayOrDeferrable || arrayOrPromise;\n\n  const execContext: ExecContext = {\n    fragmentMap,\n    contextValue,\n    variableValues,\n    resultMapper,\n    resolver,\n    fragmentMatcher,\n    deferrableOrImmediate,\n    arrayOrDeferrable,\n  };\n\n  return executeSelectionSet(\n    mainDefinition.selectionSet,\n    rootValue,\n    execContext,\n  );\n}\n\n\nfunction executeSelectionSet(\n  selectionSet: SelectionSetNode,\n  rootValue: any,\n  execContext: ExecContext,\n) {\n  const {\n    fragmentMap,\n    contextValue,\n    variableValues: variables,\n    deferrableOrImmediate,\n    arrayOrDeferrable,\n  } = execContext;\n\n  const result = {};\n\n  return deferrableOrImmediate(arrayOrDeferrable(selectionSet.selections.map((selection) => {\n    if (!shouldInclude(selection, variables)) {\n      // Skip this entirely\n      return;\n    }\n\n    if (isField(selection)) {\n      const fieldResultOrDeferrable = executeField(\n        selection,\n        rootValue,\n        execContext,\n      );\n\n      return deferrableOrImmediate(fieldResultOrDeferrable, (fieldResult) => {\n        const resultFieldKey = resultKeyNameFromField(selection);\n\n        if (fieldResult !== undefined) {\n          if (result[resultFieldKey] === undefined) {\n            result[resultFieldKey] = fieldResult;\n          } else {\n            merge(result[resultFieldKey], fieldResult);\n          }\n        }\n      });\n    } else {\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment\n        fragment = fragmentMap[selection.name.value];\n\n        if (!fragment) {\n          throw new Error(`No fragment named ${selection.name.value}`);\n        }\n      }\n\n      const typeCondition = fragment.typeCondition.name.value;\n\n      return deferrableOrImmediate(execContext.fragmentMatcher(rootValue, typeCondition, contextValue), (fragmentMatcherResult) => {\n\n        if (fragmentMatcherResult) {\n          const fragmentResultOrDeferrable = executeSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          );\n\n          return deferrableOrImmediate(fragmentResultOrDeferrable, (fragmentResult) => {\n            merge(result, fragmentResult);\n          });\n\n        }\n\n      });\n    }\n  })), () => {\n    if (execContext.resultMapper) {\n      return execContext.resultMapper(result, rootValue);\n    }\n\n    return result;\n  });\n}\n\nfunction executeField(\n  field: FieldNode,\n  rootValue: any,\n  execContext: ExecContext,\n): any {\n  const {\n    variableValues: variables,\n    contextValue,\n    resolver,\n    deferrableOrImmediate,\n  } = execContext;\n\n  const fieldName = field.name.value;\n  const args = argumentsObjectFromField(field, variables);\n\n  const info: ExecInfo = {\n    isLeaf: !field.selectionSet,\n    resultKey: resultKeyNameFromField(field),\n    directives: getDirectiveInfoFromField(field, variables),\n  };\n\n  const resultOrDeferrable = resolver(fieldName, rootValue, args, contextValue, info);\n\n  return deferrableOrImmediate(resultOrDeferrable, (result) => {\n    // Handle all scalar types here\n    if (!field.selectionSet) {\n      return result;\n    }\n\n    // From here down, the field has a selection set, which means it's trying to\n    // query a GraphQLObjectType\n    if (result == null) {\n      // Basically any field in a GraphQL response can be null, or missing\n      return result;\n    }\n\n    if (Array.isArray(result)) {\n      return executeSubSelectedArray(field, result, execContext);\n    }\n\n    // Returned value is an object, and the query has a sub-selection. Recurse.\n    return executeSelectionSet(\n      field.selectionSet,\n      result,\n      execContext,\n    );\n  });\n}\n\nfunction executeSubSelectedArray(\n  field,\n  result,\n  execContext,\n) {\n  return execContext.arrayOrDeferrable(result.map((item) => {\n    // null value in array\n    if (item === null) {\n      return null;\n    }\n\n    // This is a nested array, recurse\n    if (Array.isArray(item)) {\n      return executeSubSelectedArray(field, item, execContext);\n    }\n\n    // This is an object, run the selection set on it\n    return executeSelectionSet(\n      field.selectionSet,\n      item,\n      execContext,\n    );\n  }));\n}\n\nfunction merge(dest, src) {\n  if (\n    src === null ||\n    typeof src !== 'object' ||\n    src.constructor.name === \"Gun\"\n  ) {\n    // These types just override whatever was in dest\n    return src;\n  }\n\n  // Merge sub-objects\n  Object.keys(dest).forEach((destKey) => {\n    if (src.hasOwnProperty(destKey)) {\n      merge(dest[destKey], src[destKey]);\n    }\n  });\n\n  // Add props only on src\n  Object.keys(src).forEach((srcKey) => {\n    if (!dest.hasOwnProperty(srcKey)) {\n      dest[srcKey] = src[srcKey];\n    }\n  });\n}\n\nfunction isPromise(obj) {\n  return obj && typeof obj === 'object' && typeof obj.then === 'function';\n}\n\nfunction promiseOrImmediate(obj, fn) {\n  if (isPromise(obj)) {\n    return obj.then(fn);\n  } else {\n    return fn(obj);\n  }\n}\n\nfunction arrayOrPromise(arr) {\n  if (arr.some(isPromise)) {\n    return Promise.all(arr);\n  } else {\n    return arr;\n  }\n}\n"]}},"error":null,"hash":"a95eacd05a3b1f1c658181d06a41074f","cacheData":{"env":{}}}